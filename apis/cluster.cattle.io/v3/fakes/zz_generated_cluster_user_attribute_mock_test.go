// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package v3

import (
	"context"
	"sync"

	"github.com/rancher/norman/controller"
	"github.com/rancher/norman/objectclient"
	"k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

var (
	lockClusterUserAttributeListerMockGet  sync.RWMutex
	lockClusterUserAttributeListerMockList sync.RWMutex
)

// Ensure, that ClusterUserAttributeListerMock does implement ClusterUserAttributeLister.
// If this is not the case, regenerate this file with moq.
var _ ClusterUserAttributeLister = &ClusterUserAttributeListerMock{}

// ClusterUserAttributeListerMock is a mock implementation of ClusterUserAttributeLister.
//
//     func TestSomethingThatUsesClusterUserAttributeLister(t *testing.T) {
//
//         // make and configure a mocked ClusterUserAttributeLister
//         mockedClusterUserAttributeLister := &ClusterUserAttributeListerMock{
//             GetFunc: func(namespace string, name string) (*ClusterUserAttribute, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*ClusterUserAttribute, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedClusterUserAttributeLister in code that requires ClusterUserAttributeLister
//         // and then make assertions.
//
//     }
type ClusterUserAttributeListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*ClusterUserAttribute, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*ClusterUserAttribute, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *ClusterUserAttributeListerMock) Get(namespace string, name string) (*ClusterUserAttribute, error) {
	if mock.GetFunc == nil {
		panic("ClusterUserAttributeListerMock.GetFunc: method is nil but ClusterUserAttributeLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockClusterUserAttributeListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockClusterUserAttributeListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedClusterUserAttributeLister.GetCalls())
func (mock *ClusterUserAttributeListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockClusterUserAttributeListerMockGet.RLock()
	calls = mock.calls.Get
	lockClusterUserAttributeListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ClusterUserAttributeListerMock) List(namespace string, selector labels.Selector) ([]*ClusterUserAttribute, error) {
	if mock.ListFunc == nil {
		panic("ClusterUserAttributeListerMock.ListFunc: method is nil but ClusterUserAttributeLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockClusterUserAttributeListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockClusterUserAttributeListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedClusterUserAttributeLister.ListCalls())
func (mock *ClusterUserAttributeListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockClusterUserAttributeListerMockList.RLock()
	calls = mock.calls.List
	lockClusterUserAttributeListerMockList.RUnlock()
	return calls
}

var (
	lockClusterUserAttributeControllerMockAddClusterScopedHandler sync.RWMutex
	lockClusterUserAttributeControllerMockAddHandler              sync.RWMutex
	lockClusterUserAttributeControllerMockEnqueue                 sync.RWMutex
	lockClusterUserAttributeControllerMockGeneric                 sync.RWMutex
	lockClusterUserAttributeControllerMockInformer                sync.RWMutex
	lockClusterUserAttributeControllerMockLister                  sync.RWMutex
	lockClusterUserAttributeControllerMockStart                   sync.RWMutex
	lockClusterUserAttributeControllerMockSync                    sync.RWMutex
)

// Ensure, that ClusterUserAttributeControllerMock does implement ClusterUserAttributeController.
// If this is not the case, regenerate this file with moq.
var _ ClusterUserAttributeController = &ClusterUserAttributeControllerMock{}

// ClusterUserAttributeControllerMock is a mock implementation of ClusterUserAttributeController.
//
//     func TestSomethingThatUsesClusterUserAttributeController(t *testing.T) {
//
//         // make and configure a mocked ClusterUserAttributeController
//         mockedClusterUserAttributeController := &ClusterUserAttributeControllerMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler ClusterUserAttributeHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler ClusterUserAttributeHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() ClusterUserAttributeLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedClusterUserAttributeController in code that requires ClusterUserAttributeController
//         // and then make assertions.
//
//     }
type ClusterUserAttributeControllerMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler ClusterUserAttributeHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler ClusterUserAttributeHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() ClusterUserAttributeLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler ClusterUserAttributeHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler ClusterUserAttributeHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *ClusterUserAttributeControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler ClusterUserAttributeHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("ClusterUserAttributeControllerMock.AddClusterScopedHandlerFunc: method is nil but ClusterUserAttributeController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     ClusterUserAttributeHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockClusterUserAttributeControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockClusterUserAttributeControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedClusterUserAttributeController.AddClusterScopedHandlerCalls())
func (mock *ClusterUserAttributeControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     ClusterUserAttributeHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     ClusterUserAttributeHandlerFunc
	}
	lockClusterUserAttributeControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockClusterUserAttributeControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *ClusterUserAttributeControllerMock) AddHandler(ctx context.Context, name string, handler ClusterUserAttributeHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("ClusterUserAttributeControllerMock.AddHandlerFunc: method is nil but ClusterUserAttributeController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler ClusterUserAttributeHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockClusterUserAttributeControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockClusterUserAttributeControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedClusterUserAttributeController.AddHandlerCalls())
func (mock *ClusterUserAttributeControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler ClusterUserAttributeHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler ClusterUserAttributeHandlerFunc
	}
	lockClusterUserAttributeControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockClusterUserAttributeControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *ClusterUserAttributeControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("ClusterUserAttributeControllerMock.EnqueueFunc: method is nil but ClusterUserAttributeController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockClusterUserAttributeControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockClusterUserAttributeControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedClusterUserAttributeController.EnqueueCalls())
func (mock *ClusterUserAttributeControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockClusterUserAttributeControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockClusterUserAttributeControllerMockEnqueue.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *ClusterUserAttributeControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("ClusterUserAttributeControllerMock.GenericFunc: method is nil but ClusterUserAttributeController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockClusterUserAttributeControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockClusterUserAttributeControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedClusterUserAttributeController.GenericCalls())
func (mock *ClusterUserAttributeControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockClusterUserAttributeControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockClusterUserAttributeControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *ClusterUserAttributeControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("ClusterUserAttributeControllerMock.InformerFunc: method is nil but ClusterUserAttributeController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockClusterUserAttributeControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockClusterUserAttributeControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedClusterUserAttributeController.InformerCalls())
func (mock *ClusterUserAttributeControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockClusterUserAttributeControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockClusterUserAttributeControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *ClusterUserAttributeControllerMock) Lister() ClusterUserAttributeLister {
	if mock.ListerFunc == nil {
		panic("ClusterUserAttributeControllerMock.ListerFunc: method is nil but ClusterUserAttributeController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockClusterUserAttributeControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockClusterUserAttributeControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedClusterUserAttributeController.ListerCalls())
func (mock *ClusterUserAttributeControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockClusterUserAttributeControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockClusterUserAttributeControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *ClusterUserAttributeControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("ClusterUserAttributeControllerMock.StartFunc: method is nil but ClusterUserAttributeController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockClusterUserAttributeControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockClusterUserAttributeControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedClusterUserAttributeController.StartCalls())
func (mock *ClusterUserAttributeControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockClusterUserAttributeControllerMockStart.RLock()
	calls = mock.calls.Start
	lockClusterUserAttributeControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *ClusterUserAttributeControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("ClusterUserAttributeControllerMock.SyncFunc: method is nil but ClusterUserAttributeController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockClusterUserAttributeControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockClusterUserAttributeControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedClusterUserAttributeController.SyncCalls())
func (mock *ClusterUserAttributeControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockClusterUserAttributeControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockClusterUserAttributeControllerMockSync.RUnlock()
	return calls
}

var (
	lockClusterUserAttributeInterfaceMockAddClusterScopedHandler   sync.RWMutex
	lockClusterUserAttributeInterfaceMockAddClusterScopedLifecycle sync.RWMutex
	lockClusterUserAttributeInterfaceMockAddHandler                sync.RWMutex
	lockClusterUserAttributeInterfaceMockAddLifecycle              sync.RWMutex
	lockClusterUserAttributeInterfaceMockController                sync.RWMutex
	lockClusterUserAttributeInterfaceMockCreate                    sync.RWMutex
	lockClusterUserAttributeInterfaceMockDelete                    sync.RWMutex
	lockClusterUserAttributeInterfaceMockDeleteCollection          sync.RWMutex
	lockClusterUserAttributeInterfaceMockDeleteNamespaced          sync.RWMutex
	lockClusterUserAttributeInterfaceMockGet                       sync.RWMutex
	lockClusterUserAttributeInterfaceMockGetNamespaced             sync.RWMutex
	lockClusterUserAttributeInterfaceMockList                      sync.RWMutex
	lockClusterUserAttributeInterfaceMockObjectClient              sync.RWMutex
	lockClusterUserAttributeInterfaceMockUpdate                    sync.RWMutex
	lockClusterUserAttributeInterfaceMockWatch                     sync.RWMutex
)

// Ensure, that ClusterUserAttributeInterfaceMock does implement ClusterUserAttributeInterface.
// If this is not the case, regenerate this file with moq.
var _ ClusterUserAttributeInterface = &ClusterUserAttributeInterfaceMock{}

// ClusterUserAttributeInterfaceMock is a mock implementation of ClusterUserAttributeInterface.
//
//     func TestSomethingThatUsesClusterUserAttributeInterface(t *testing.T) {
//
//         // make and configure a mocked ClusterUserAttributeInterface
//         mockedClusterUserAttributeInterface := &ClusterUserAttributeInterfaceMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync ClusterUserAttributeHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle ClusterUserAttributeLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync ClusterUserAttributeHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle ClusterUserAttributeLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() ClusterUserAttributeController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *ClusterUserAttribute) (*ClusterUserAttribute, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1.GetOptions) (*ClusterUserAttribute, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1.GetOptions) (*ClusterUserAttribute, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*ClusterUserAttributeList, error) {
// 	               panic("mock out the List method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *ClusterUserAttribute) (*ClusterUserAttribute, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedClusterUserAttributeInterface in code that requires ClusterUserAttributeInterface
//         // and then make assertions.
//
//     }
type ClusterUserAttributeInterfaceMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync ClusterUserAttributeHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle ClusterUserAttributeLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync ClusterUserAttributeHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle ClusterUserAttributeLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() ClusterUserAttributeController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *ClusterUserAttribute) (*ClusterUserAttribute, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1.GetOptions) (*ClusterUserAttribute, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1.GetOptions) (*ClusterUserAttribute, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*ClusterUserAttributeList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *ClusterUserAttribute) (*ClusterUserAttribute, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync ClusterUserAttributeHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle ClusterUserAttributeLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync ClusterUserAttributeHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle ClusterUserAttributeLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *ClusterUserAttribute
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *ClusterUserAttribute
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *ClusterUserAttributeInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync ClusterUserAttributeHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("ClusterUserAttributeInterfaceMock.AddClusterScopedHandlerFunc: method is nil but ClusterUserAttributeInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        ClusterUserAttributeHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockClusterUserAttributeInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockClusterUserAttributeInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedClusterUserAttributeInterface.AddClusterScopedHandlerCalls())
func (mock *ClusterUserAttributeInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        ClusterUserAttributeHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        ClusterUserAttributeHandlerFunc
	}
	lockClusterUserAttributeInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockClusterUserAttributeInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *ClusterUserAttributeInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle ClusterUserAttributeLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("ClusterUserAttributeInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but ClusterUserAttributeInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   ClusterUserAttributeLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockClusterUserAttributeInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockClusterUserAttributeInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedClusterUserAttributeInterface.AddClusterScopedLifecycleCalls())
func (mock *ClusterUserAttributeInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   ClusterUserAttributeLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   ClusterUserAttributeLifecycle
	}
	lockClusterUserAttributeInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockClusterUserAttributeInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *ClusterUserAttributeInterfaceMock) AddHandler(ctx context.Context, name string, sync ClusterUserAttributeHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("ClusterUserAttributeInterfaceMock.AddHandlerFunc: method is nil but ClusterUserAttributeInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync ClusterUserAttributeHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockClusterUserAttributeInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockClusterUserAttributeInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedClusterUserAttributeInterface.AddHandlerCalls())
func (mock *ClusterUserAttributeInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync ClusterUserAttributeHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync ClusterUserAttributeHandlerFunc
	}
	lockClusterUserAttributeInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockClusterUserAttributeInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *ClusterUserAttributeInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle ClusterUserAttributeLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("ClusterUserAttributeInterfaceMock.AddLifecycleFunc: method is nil but ClusterUserAttributeInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle ClusterUserAttributeLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockClusterUserAttributeInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockClusterUserAttributeInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedClusterUserAttributeInterface.AddLifecycleCalls())
func (mock *ClusterUserAttributeInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle ClusterUserAttributeLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle ClusterUserAttributeLifecycle
	}
	lockClusterUserAttributeInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockClusterUserAttributeInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *ClusterUserAttributeInterfaceMock) Controller() ClusterUserAttributeController {
	if mock.ControllerFunc == nil {
		panic("ClusterUserAttributeInterfaceMock.ControllerFunc: method is nil but ClusterUserAttributeInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockClusterUserAttributeInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockClusterUserAttributeInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedClusterUserAttributeInterface.ControllerCalls())
func (mock *ClusterUserAttributeInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockClusterUserAttributeInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockClusterUserAttributeInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *ClusterUserAttributeInterfaceMock) Create(in1 *ClusterUserAttribute) (*ClusterUserAttribute, error) {
	if mock.CreateFunc == nil {
		panic("ClusterUserAttributeInterfaceMock.CreateFunc: method is nil but ClusterUserAttributeInterface.Create was just called")
	}
	callInfo := struct {
		In1 *ClusterUserAttribute
	}{
		In1: in1,
	}
	lockClusterUserAttributeInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockClusterUserAttributeInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedClusterUserAttributeInterface.CreateCalls())
func (mock *ClusterUserAttributeInterfaceMock) CreateCalls() []struct {
	In1 *ClusterUserAttribute
} {
	var calls []struct {
		In1 *ClusterUserAttribute
	}
	lockClusterUserAttributeInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockClusterUserAttributeInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ClusterUserAttributeInterfaceMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("ClusterUserAttributeInterfaceMock.DeleteFunc: method is nil but ClusterUserAttributeInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockClusterUserAttributeInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockClusterUserAttributeInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedClusterUserAttributeInterface.DeleteCalls())
func (mock *ClusterUserAttributeInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockClusterUserAttributeInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockClusterUserAttributeInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *ClusterUserAttributeInterfaceMock) DeleteCollection(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("ClusterUserAttributeInterfaceMock.DeleteCollectionFunc: method is nil but ClusterUserAttributeInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockClusterUserAttributeInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockClusterUserAttributeInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedClusterUserAttributeInterface.DeleteCollectionCalls())
func (mock *ClusterUserAttributeInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1.DeleteOptions
	ListOpts   v1.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}
	lockClusterUserAttributeInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockClusterUserAttributeInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *ClusterUserAttributeInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("ClusterUserAttributeInterfaceMock.DeleteNamespacedFunc: method is nil but ClusterUserAttributeInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockClusterUserAttributeInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockClusterUserAttributeInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedClusterUserAttributeInterface.DeleteNamespacedCalls())
func (mock *ClusterUserAttributeInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockClusterUserAttributeInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockClusterUserAttributeInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ClusterUserAttributeInterfaceMock) Get(name string, opts v1.GetOptions) (*ClusterUserAttribute, error) {
	if mock.GetFunc == nil {
		panic("ClusterUserAttributeInterfaceMock.GetFunc: method is nil but ClusterUserAttributeInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockClusterUserAttributeInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockClusterUserAttributeInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedClusterUserAttributeInterface.GetCalls())
func (mock *ClusterUserAttributeInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1.GetOptions
	}
	lockClusterUserAttributeInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockClusterUserAttributeInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *ClusterUserAttributeInterfaceMock) GetNamespaced(namespace string, name string, opts v1.GetOptions) (*ClusterUserAttribute, error) {
	if mock.GetNamespacedFunc == nil {
		panic("ClusterUserAttributeInterfaceMock.GetNamespacedFunc: method is nil but ClusterUserAttributeInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockClusterUserAttributeInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockClusterUserAttributeInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedClusterUserAttributeInterface.GetNamespacedCalls())
func (mock *ClusterUserAttributeInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}
	lockClusterUserAttributeInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockClusterUserAttributeInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ClusterUserAttributeInterfaceMock) List(opts v1.ListOptions) (*ClusterUserAttributeList, error) {
	if mock.ListFunc == nil {
		panic("ClusterUserAttributeInterfaceMock.ListFunc: method is nil but ClusterUserAttributeInterface.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockClusterUserAttributeInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockClusterUserAttributeInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedClusterUserAttributeInterface.ListCalls())
func (mock *ClusterUserAttributeInterfaceMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockClusterUserAttributeInterfaceMockList.RLock()
	calls = mock.calls.List
	lockClusterUserAttributeInterfaceMockList.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *ClusterUserAttributeInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("ClusterUserAttributeInterfaceMock.ObjectClientFunc: method is nil but ClusterUserAttributeInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockClusterUserAttributeInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockClusterUserAttributeInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedClusterUserAttributeInterface.ObjectClientCalls())
func (mock *ClusterUserAttributeInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockClusterUserAttributeInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockClusterUserAttributeInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ClusterUserAttributeInterfaceMock) Update(in1 *ClusterUserAttribute) (*ClusterUserAttribute, error) {
	if mock.UpdateFunc == nil {
		panic("ClusterUserAttributeInterfaceMock.UpdateFunc: method is nil but ClusterUserAttributeInterface.Update was just called")
	}
	callInfo := struct {
		In1 *ClusterUserAttribute
	}{
		In1: in1,
	}
	lockClusterUserAttributeInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockClusterUserAttributeInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedClusterUserAttributeInterface.UpdateCalls())
func (mock *ClusterUserAttributeInterfaceMock) UpdateCalls() []struct {
	In1 *ClusterUserAttribute
} {
	var calls []struct {
		In1 *ClusterUserAttribute
	}
	lockClusterUserAttributeInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockClusterUserAttributeInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *ClusterUserAttributeInterfaceMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("ClusterUserAttributeInterfaceMock.WatchFunc: method is nil but ClusterUserAttributeInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockClusterUserAttributeInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockClusterUserAttributeInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedClusterUserAttributeInterface.WatchCalls())
func (mock *ClusterUserAttributeInterfaceMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockClusterUserAttributeInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockClusterUserAttributeInterfaceMockWatch.RUnlock()
	return calls
}
